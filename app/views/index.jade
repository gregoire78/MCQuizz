extends layout

block content
	h1= title
	p Welcome to #{title}
	#sortable.sortableList
		div(data-rep="0")
			| Clicking on these elements triggers a regular
			code click
			| event you can listen to.
		div(data-rep="1") Try dragging or clicking on this element.
		div(data-rep="2") Note how you can click normally?
		div(data-rep="3") Drags don't trigger click events.
		div(data-rep="4") Clicks don't end up in a drag, either.
		div(data-rep="5") This is useful if you have elements that can be both clicked or dragged.
	hr
	#sortable1.sortableList
		div(data-rep="0")
			.media
				img.d-flex.mr-3(src='http://placehold.it/64x64', alt='Generic placeholder image')
				.media-body
					h5.mt-0 Media heading
					|     Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.
		div(data-rep="1")
			.media
				img.d-flex.mr-3(src='http://placehold.it/64x64', alt='Generic placeholder image')
				.media-body
					h5.mt-0 Media heading
					|     Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.
		div(data-rep="2")
			.media
				img.d-flex.mr-3(src='http://placehold.it/64x64', alt='Generic placeholder image')
				.media-body
					h5.mt-0 Media heading
					|     Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.


block script
	script(src='/dragula-3.7.2/dist/dragula.min.js')
	script.
		(function () {

			sortMain('sortable');
			sortMain('sortable1');
			//sortMain('sortable2', false);

			function shuffle(array) {
				var tmp, current, top = array.length;
				if (top) while (--top) {
					current = Math.floor(Math.random() * (top + 1));
					tmp = array[current];
					array[current] = array[top];
					array[top] = tmp;
				}
				return array;
			}

			function sortMain(id, rand){
				var $sortableList = $('#'+id);
				dragula([document.getElementById(id)])
					.on('drop', function (el) {
						var listElements = $sortableList.children();
						console.log(listElements); // [ <div>, <div>, ... ]
						var listValues = [];
						listElements.each(function (i, o) {
							listValues.push($(o).data('rep'));
						})
						console.log(listValues); // [ "Item 1", "Item 2", ... ]
					})
					.on('out', function (el) {
						$('.gu-mirror').removeClass('cu-over').addClass('cu-out');
						console.log('out');
					})
					.on('over', function (el) {
						$('.gu-mirror').removeClass('cu-out').addClass('cu-over');
						console.log('over');
					})
					.on('dragend', function (el) {
						$('.gu-mirror').removeClass('cu-out').removeClass('cu-over');
						console.log('end');
					})

				for (var a = [], i = 0; i < 6; ++i) a[i] = i;
				a = shuffle(a);
				console.log(a)

				$.fn.randomize = function (selector) {
					var $elems = selector ? $(this).find(selector) : $(this).children(),
					$parents = $elems.parent();

					$parents.each(function () {
					$(this).children(selector).sort(function () {
						return Math.round(Math.random()) - 0.5;
						// }). remove().appendTo(this); // 2014-05-24: Removed `random` but leaving for reference. See notes under 'ANOTHER EDIT'
						}).detach().appendTo(this);
					});

					return this;
				};

				if (rand == undefined || rand == true){
					$sortableList.randomize('div');
				}
			}
		})();