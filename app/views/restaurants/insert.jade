extends ../layout

block content
	a(href='https://restaurant.michelin.fr/restaurants/france', target="_blank") Guide Michelin
	form(method='POST', action='')
		.form-group
			label(for='inputRestoName') Nom du restaurant
			input#inputRestoName.form-control(type='text', aria-describedby='emailHelp', placeholder='Entrez le nom du restaurant')
			small#restoNameHelp.form-text.text-muted Le nom du restaurant est primordial.
		.form-group
			label(for='inputRestoAddress') Adresse
			input#inputRestoAddress.form-control(type='text', placeholder='Adresse du restaurant')
		.form-group
			label(for='inputRestoCity') Ville
			input#inputRestoCity.form-control(type='text', placeholder='Ville du restaurant')
		.form-group
			label(for='inputRestoPostalCode') Code postal
			input#inputRestoPostalCode.form-control(type='number', placeholder='Code postal du restaurant')
		.form-group
			label(for='inputRestoDescription') Description
			textarea#inputRestoDescription.form-control(rows='3')
		.form-group
			label(for='exampleInputFile') Image
			input#exampleInputFile.form-control-file(type='file', aria-describedby='fileHelp')
			small#fileHelp.form-text.text-muted
				| This is some placeholder block-level help text for the above input. It's a bit lighter and easily wraps to a new line.
		button.btn.btn-primary(type='submit') Submit

	// Button trigger modal
	//button.btn.btn-primary(type='button', data-toggle='modal', data-target='#myModal')
	//	| Launch demo modal
	// Modal
	#myModal.modal(tabindex='-1', role='dialog', aria-labelledby='exampleModalLabel', aria-hidden='true')
		.modal-dialog.modal-lg(role='document')
			.modal-content
				.modal-header
					h5#exampleModalLabel.modal-title Modal title
					//button.close(type='button', data-dismiss='modal', aria-label='Close')
					//	span(aria-hidden='true') Ã—
				.modal-body
					div(style="width: 100%;")
						img#image(src='')
				.modal-footer
					button.btn.btn-secondary(type='button', data-dismiss='modal') Close
					button.btn.btn-primary(type='button') Save changes
	.de
block stylesheet
	link(rel='stylesheet', href='/stylesheets/restaurant.css')

block script
	script(src='/js/canvas-to-blob.min.js')
	script.
		function getDataURLCanvas(sourceCanvas) {
			var canvas = document.createElement('canvas');
			var context = canvas.getContext('2d');
			var width = sourceCanvas.width;
			var height = sourceCanvas.height;

			canvas.width = width;
			canvas.height = height;
			context.drawImage(sourceCanvas, 0, 0, width, height);

			return canvas;
		}
		function readURL(input) {
			if (input.files && input.files[0]) {
				var reader = new FileReader();
				reader.onload = function (e) {
					$('#image').attr('src', e.target.result)
					$("#myModal").modal({
						backdrop: 'static',
						keyboard: false
					}).modal('show')
				}
				reader.readAsDataURL(input.files[0]);
			}

		}
		$("#exampleInputFile").change(function () {
			readURL(this);
		});
		var cropBoxData,canvasData;
		$("#myModal").on('shown.bs.modal', function (e) {
			$('#image').cropper({
				aspectRatio: 16 / 10,
				autoCropArea: 1,
				zoomOnWheel: true
				//crop: function (e) {
				//	// Output the result data for cropping image.
				//	console.log(e.x);
				//	console.log(e.y);
				//	console.log(e.width);
				//	console.log(e.height);
				//	console.log(e.rotate);
				//	console.log(e.scaleX);
				//	console.log(e.scaleY);
				//},
				//built: function () {
				//	$('#image').cropper('setCropBoxData', cropBoxData);
				//	$('#image').cropper('setCanvasData', canvasData);
				//}
			});
		}).on('hidden.bs.modal', function (e) {
			var croppedCanvas = $('#image').cropper('getCroppedCanvas', {
				fillColor: 'green'
			});
			var roundedCanvas = getDataURLCanvas(croppedCanvas);
			//cropBoxData = $('#image').cropper('getCropBoxData');
			//canvasData = $('#image').cropper('getCanvasData');
			var dataURL = roundedCanvas.toDataURL('image/png');
			$(".de").empty().html('<img src="' + dataURL + '">');
			var blob = dataURLtoBlob(dataURL);
			console.log(blob)
			$('#image').cropper('destroy');
		})