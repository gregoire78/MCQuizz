extends ../layout

block content
	a(href='https://restaurant.michelin.fr/restaurants/france', target="_blank") Guide Michelin
	form#addResto(method='POST', action='', enctype="multipart/form-data")
		.form-group
			label(for='inputRestoName') Nom du restaurant
			input#inputRestoName.form-control(type='text', aria-describedby='emailHelp', placeholder='Entrez le nom du restaurant', name="resto[name]")
			small#restoNameHelp.form-text.text-muted Le nom du restaurant est primordial.
		.form-group
			label(for='inputRestoAddress') Adresse
			input#inputRestoAddress.form-control(type='text', placeholder='Adresse du restaurant', name="resto[address]")
		.form-group
			label(for='inputRestoCity') Ville
			input#inputRestoCity.form-control(type='text', placeholder='Ville du restaurant', name="resto[city]")
		.form-group
			label(for='inputRestoPostalCode') Code postal
			input#inputRestoPostalCode.form-control(type='number', placeholder='Code postal du restaurant', name="resto[postal_code]")
		.form-group
			label(for='inputRestoDescription') Description
			textarea#inputRestoDescription.form-control(rows='3', name="resto[description]")
		.form-group
			label(for='exampleInputFile') Image
			input#exampleInputFile.form-control-file(type='file', aria-describedby='fileHelp', accept="image/gif,image/png,image/jpeg,image/jpg", name="recfile")
			small#fileHelp.form-text.text-muted
				| This is some placeholder block-level help text for the above input. It's a bit lighter and easily wraps to a new line.
		button.btn.btn-primary(type='submit') Submit
	// Button trigger modal
	//button.btn.btn-primary(type='button', data-toggle='modal', data-target='#myModal')
	//	| Launch demo modal
	// Modal
	#myModal.modal(tabindex='-1', role='dialog', aria-labelledby='exampleModalLabel', aria-hidden='true')
		.modal-dialog.modal-lg(role='document')
			.modal-content
				.modal-header
					h5#exampleModalLabel.modal-title Modal title
					//button.close(type='button', data-dismiss='modal', aria-label='Close')
					//	span(aria-hidden='true') Ã—
				.modal-body
					div(style="width: 100%;")
						img#image(src='')
					.container#cropSettings
						.row
							.col
								.btn-group(role='group', aria-label='Basic example')
									button#plus.btn.btn-secondary(type='button') plus
									button#moins.btn.btn-secondary(type='button') moins
								button#reset.btn.btn-secondary(type='button') reset
							.col
								div.previewCrop
				.modal-footer
					button.btn.btn-secondary(type='button', data-dismiss='modal') Close
					button.btn.btn-primary(type='button') Save changes
					input#custom(type='text')
	.previewImage
block stylesheet
	link(rel='stylesheet', href='/stylesheets/restaurant.css')
	link(rel='stylesheet', href='http://bgrins.github.io/spectrum/spectrum.css')

block script
	script(src='/js/canvas-to-blob.min.js')
	script(src='http://bgrins.github.io/spectrum/spectrum.js')
	script.
		$("#custom").spectrum({
			cancelText: 'annuler',
			color: "#ffffff",
			move: function(color) {
				$('.previewCrop').css({'background-color': color.toHexString()})
				//$('.cropper-container').css({'background-color': color.toHexString()})
			},
			hide: function (color) {
				$('.previewCrop').css({'background-color': color.toHexString()})
			}
		});
		var fileSelectEle = $('#exampleInputFile');

		function getDataURLCanvas(sourceCanvas) {
			var canvas = document.createElement('canvas');
			var context = canvas.getContext('2d');
			var width = sourceCanvas.width;
			var height = sourceCanvas.height;
			canvas.width = width;
			canvas.height = height;
			context.drawImage(sourceCanvas, 0, 0, width, height);
			return canvas;
		}

		function readURL(input) {
			if (input.files && input.files[0]) {
				var reader = new FileReader();
				reader.onload = function (e) {
					$('#image').attr('src', e.target.result)
					$("#myModal").modal({
						backdrop: 'static',
						keyboard: false
					}).modal('show')
				}
				reader.readAsDataURL(input.files[0]);
				return input.files[0].name;
			}
		}

		$('#plus').on('click', function (e) {
			$('#image').cropper('zoom', 0.1);
		})
		$('#moins').on('click', function (e) {
			$('#image').cropper('zoom', -0.1);
		})
		$('#reset').on('click', function (e) {
			$('.previewCrop').css({'background-color': "#ffffff"});
			$("#custom").spectrum("set", "#ffffff");
			$('#image').cropper('reset');
		})
		var cropBoxData,canvasData,croppedCanvas, blob, id;
		fileSelectEle.on('change', function (e) {
			if (this.value.length == 0) {
				$(".previewImage").empty();
				//alert('You clicked cancel - ' + "FileName:" + this.value + "; Length: " + this.value.length);
			} else {
				id = readURL(this);
				//alert('You selected a file - ' + "FileName:" + this.value + "; Length: " + this.value.length);
			}
		});

		$("#myModal").on('shown.bs.modal', function (e) {
			$('#image').cropper({
				aspectRatio: 16 / 10,
				autoCropArea: 1,
				zoomOnWheel: true,
				checkCrossOrigin: false,
				dragMode: 'move',
				toggleDragModeOnDblclick: false,
				preview: $('.previewCrop'),
				//crop: function (e) {
				//	// Output the result data for cropping image.
				//	console.log(e.x);
				//	console.log(e.y);
				//	console.log(e.width);
				//	console.log(e.height);
				//	console.log(e.rotate);
				//	console.log(e.scaleX);
				//	console.log(e.scaleY);
				//},
				built: function () {
					if (!(localStorage.getItem(id) === null)) {
						$('#image').cropper('setCropBoxData', JSON.parse(localStorage.getItem(id)).cropBoxData);
						$('#image').cropper('setCanvasData', JSON.parse(localStorage.getItem(id)).canvasData);
						$('.previewCrop').css({'background-color': JSON.parse(localStorage.getItem(id)).color});
						$("#custom").spectrum("set", JSON.parse(localStorage.getItem(id)).color);
					} else {
						$('.previewCrop').css({'background-color': "#ffffff"});
						$("#custom").spectrum("set", "#ffffff");
					}
				}
			});
		}).on('hidden.bs.modal', function (e) {
			croppedCanvas = $('#image').cropper('getCroppedCanvas', {
				fillColor: $("#custom").spectrum("get").toHexString()
			});
			//var roundedCanvas = getDataURLCanvas(croppedCanvas);
			cropBoxData = $('#image').cropper('getCropBoxData');
			canvasData = $('#image').cropper('getCanvasData');
			var store = {
				"color": $("#custom").spectrum("get").toHexString(),
				"cropBoxData": cropBoxData,
				"canvasData": canvasData
			}
			localStorage.setItem(id.toString(),JSON.stringify(store));
			var dataURL = croppedCanvas.toDataURL('image/png');
			$(".previewImage").empty().html('<img height="200" src="' + dataURL + '">');
			blob = dataURLtoBlob(dataURL);
			$('#image').cropper('destroy');
		})


		$('#addResto').on('submit', function (e) {
			e.preventDefault();
			var $form = $(this);
			// Create a test FormData object
			var formData = new FormData(this);
			formData.append('file', blob, "cropped.png");
			// Display the key/value pairs
			for (var pair of formData.entries()) {
				console.log(pair[0]+ ', ' + pair[1]);
			}
			$form.find('button[type=submit]').text('Chargement ...');
			$.ajax({
				data: formData,
				type: "POST",
				contentType: false,
				cache: false,
				processData:false,
				dataType:"json"
			})
				.always(function () {
					$form.find('button[type=submit]').text('Enregistrer');
				})
				.done(function (data, textStatus, jqXHR) {
					console.log(jqXHR.responseJSON);
				})
				.fail(function (jqXHR, textStatus) {
					console.log(jqXHR);
				})
		});